#line 1 "/home/kk/CLionProjects/mini/cmake-build-debug/mc_lexer.yy.cc"

#line 3 "/home/kk/CLionProjects/mini/cmake-build-debug/mc_lexer.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int MC::MC_Scanner::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 241
#define YY_END_OF_BUFFER 242
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1080] =
    {   0,
        0,    0,  242,  240,  239,  239,  223,  240,  223,  223,
      240,  223,  223,  212,  231,  226,  229,  240,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  223,  232,    0,  222,    0,  224,    0,
      221,    0,    0,  212,  214,    0,  213,    0,  230,  233,
      228,    0,  235,    0,    0,  234,  234,  234,  234,    7,
      234,  234,  234,  234,  234,   16,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,   81,  234,   83,   92,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      126,  234,  131,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  186,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  225,    0,  222,    0,    0,
      221,    0,    0,  217,  213,    0,    0,  215,  227,    0,
        0,    0,    1,    2,  234,  234,    5,    6,    8,  234,
      234,  234,  234,   13,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,   45,  234,

      234,  234,  234,  234,   55,  234,  234,  234,  234,  234,
       62,  234,  234,  234,  234,  234,  234,  234,   69,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,   89,  234,  234,   95,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  119,  234,  122,  234,  234,  234,    0,  234,  234,
      133,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  162,  234,  234,  234,  234,  234,
      234,  169,  176,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  196,  234,  234,  234,  234,  234,  234,  234,  234,
      210,    0,  216,  236,  238,  237,  234,  234,  234,  234,
      234,  234,   14,   15,   17,  234,   19,  234,   21,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,   39,  234,  234,  234,  234,  234,  234,   50,
      234,  234,  234,   57,   58,   59,   60,   63,  234,   65,
      234,  234,  234,  234,  234,  234,   72,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  184,
      164,   89,   11,  234,   91,  234,   94,   96,   97,  234,

      234,  100,  101,  234,  234,  104,  234,  107,  108,  111,
      234,  234,  234,  234,  234,  234,  234,  234,  124,  234,
      234,    0,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  211,  141,  143,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  163,  234,  165,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  182,  183,  234,
      234,  234,  218,  189,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  205,  234,  234,
      208,  234,    3,  234,  234,  234,  234,  234,  234,  234,

      234,   22,  234,  234,  234,  234,  234,  234,  234,  234,
       31,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      220,   67,   68,   70,  234,  234,   74,   75,  234,  234,
      234,  234,   95,  234,   85,   86,  234,  234,  234,  234,
      234,  234,   99,  102,  103,  234,  234,  234,  234,  113,
      234,  234,  234,  234,  234,  234,  234,  234,    0,  234,
      234,  132,  134,  234,  234,  234,  234,  139,  140,  142,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      154,  145,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      179,  234,  234,  234,  234,  234,  234,  190,  234,  234,
      234,  234,  234,  195,  197,  234,  234,  201,  234,  234,
      234,  206,  207,  209,  234,  234,   10,   12,  234,   20,
      234,  234,   24,  234,  234,  234,  234,  234,   30,  234,
       36,  234,  234,  234,  234,  234,  234,  234,  234,  234,
       49,  234,  234,  234,   56,   61,  234,  234,   68,  234,
      234,   76,  234,  234,  234,   82,   84,  234,   88,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  125,  234,    0,  234,  129,  234,  234,

      234,  234,  234,  145,  234,  147,  148,  234,  234,  234,
      152,  153,  155,  156,  234,  159,  234,  234,  234,  166,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  191,  234,  192,  234,
      194,  234,  234,  201,  234,  234,  234,    4,  234,   18,
      234,   23,   25,  234,  234,  234,   29,  234,  234,  234,
      234,  234,  234,  234,   45,   46,   47,   48,  234,  234,
      234,   64,   66,   71,  234,  234,  234,  234,  234,   89,
      234,   93,   98,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  121,  234,   45,    0,  234,  234,  135,

      234,  137,  234,  234,  146,  149,  150,  234,  157,  234,
      234,  234,  234,  167,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  188,  219,  234,
      234,  234,  234,  203,  204,  234,  234,  234,  234,   28,
      234,   37,   40,   41,  234,  234,  234,   51,  234,   53,
       73,  234,  234,  234,  234,  234,   90,  234,  109,  110,
      234,  234,  234,  234,  234,  234,  234,  120,  234,    0,
      128,  234,  234,  234,  234,  151,  234,  234,  234,  168,
      234,  171,  234,  234,  234,  234,  177,  234,  234,  234,
      185,  187,  193,  198,  199,  234,  234,  234,   21,   26,

      234,  234,  234,  234,   38,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  105,  234,  234,  115,  234,
      115,  234,  234,  234,    0,  234,  136,  138,  234,  234,
      160,  161,  234,  234,  234,  234,  234,  234,  180,  234,
      234,  202,  234,  234,   27,  234,  234,  234,  234,   43,
       44,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      114,  116,  234,  234,  234,    0,  130,  144,  234,  234,
      172,  234,  234,  234,  234,  181,  234,  234,  234,  234,
      234,  234,  234,  234,   54,  234,  234,   79,   80,   87,
      234,  234,  234,  234,  234,    0,  234,  234,  234,  234,

      234,  234,  234,  234,  234,   32,   33,   35,  234,  234,
      234,  234,  234,  112,  234,  234,  234,  127,  234,  170,
      234,  234,  234,  234,  234,  203,  234,  234,  234,   52,
       77,  234,  234,  234,  118,  234,  234,  234,  234,  234,
      178,  200,    9,  234,  234,  234,  106,  234,  234,  234,
      173,  234,  234,  234,   42,  234,  234,  234,  234,  234,
      234,  234,   78,  234,  234,  234,  234,  175,   34,  234,
      234,  234,  234,  117,  123,  158,  234,  174,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    9,    7,
        7,    7,   10,    7,   11,   12,    7,   13,   14,   15,
       13,   16,   13,   13,   13,   17,   13,    1,    7,   18,
       19,   20,    1,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
        1,   48,    1,    7,   49,   50,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    1,   77,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    1,    3,    4,    1,    1,    5,    1,
        1,    4,    6,    6,    6,    6,    6,    1,    1,    1,
        1,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    6,    7,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1
    } ;

static const flex_int16_t yy_base[1089] =
    {   0,
        0,    0,  490, 2289, 2289, 2289,  470,   73, 2289,  473,
       70,   68,   73,   79,   78, 2289,  460,   95,   77,   94,
       93,  148,  132,  198,   68,  130,  182,   72,   83,  149,
      199,  140,  191,  129,   72,  235,  277,  326,  238,  104,
      266,  121,    0,  331, 2289,  145,  370,  193, 2289,  154,
      364,  164,  267,  354,  272,  382,  387,  401,  331, 2289,
     2289,    0,  227,    0,    0,    0,  190,  258,  332,  194,
      186,  216,  391,  209,  251,    0,  276,  384,  325,  394,
      271,  381,  404,  310,  270,  325,  354,  397,  383,  399,
      401,  399,  400,  393,  402,  401,  407,  413,  442,  404,

      440,  429,    0,  442,  483,    0,  454,  452,  437,  451,
      464,  453,  505,  451,  471,  497,  474,  460,  485,  502,
      334,  461,  479,  497,  524,  503,  513,  568,  516,  515,
      513,  528,  580,  523,  540,  559,  559,  530,  535,  577,
      575,  573,  574,  567,    0,  621,  624,  601,  636,  615,
      620,  622,  619,  631,  626, 2289,  271,  324,  326,  658,
      660,  661,  683,  688,  697,  705,  711,  716, 2289,  344,
      324,  276,    0,    0,  681,  684,    0,    0,    0,  698,
      699,  707,  716,    0,  716,  711,  708,  718,  708,  721,
      715,  715,  740,  728,  713,  716,  736,  274,  759,  737,

      771,  737,  749,  754,    0,  773,  761,  766,  771,  775,
        0,  768,  781,  764,  773,  767,  784,  789,  789,  780,
      783,  782,  777,  790,  794,  794,  802,  813,  811,  821,
      808,  825,  839,  818,  823,  819,  827,  838,  820,  838,
      836,  843,  846,  850,  845,  837,  221,  853,  848,  858,
      842,  855,  849,    0,  852,  864,  882,  913,  869,  891,
      892,  897,  888,  899,  896,  903,  906,  903,  904,  906,
      911,  909,  894,  899,  899,  907,  916,  917,  921,  929,
      921,  937,  926,  953,    0,  932,  944,  953,  958,  940,
      958,  963,    0,  946,  965,  955,  953,  957,  952,  959,

      950,  967,  970,  973,  964,  977,  966,  966,  991, 1002,
     1005,    0,  999,  218,  993, 1014, 1004, 1007, 1012, 1004,
        0, 1041, 1062, 2289, 2289, 2289, 1012, 1006,  199, 1020,
     1026, 1026,    0,    0,    0, 1049,    0, 1045, 1060, 1051,
     1062, 1051, 1060, 1057, 1050, 1062, 1067, 1054, 1056, 1071,
     1062, 1076, 1060, 1089, 1069, 1082, 1063, 1060, 1066, 1069,
     1070, 1080, 1084,    0,    0,    0, 1089,    0, 1094,    0,
     1118, 1115, 1113, 1102, 1118, 1115,    0, 1108, 1109, 1114,
     1118,  193,  143, 1115, 1110, 1123, 1118, 1118, 1126,    0,
        0,    0,    0, 1136,    0, 1140,    0,    0,    0, 1133,

     1140,    0,    0, 1126, 1128,    0, 1143,    0, 1158,    0,
     1140, 1158, 1147, 1165, 1159, 1174, 1163, 1164,    0, 1181,
     1169, 1167, 1177, 1173, 1175, 1185, 1187, 1197, 1194, 1195,
     1190,    0, 1183,    0, 1185, 1180, 1204, 1199, 1212, 1213,
     1209, 1206, 1208, 1224, 1216, 1232, 1217, 1226, 1226, 1241,
     1236, 1228,    0, 1236,    0, 1236, 1241, 1242, 1228, 1234,
     1255, 1257, 1237, 1249, 1256, 1247, 1254,    0,    0, 1262,
     1258, 1265,    0,    0, 1270, 1272, 1279, 1292, 1289, 1277,
     1293, 1295, 1299, 1299, 1297, 1299, 1299,    0, 1304, 1305,
        0, 1307,    0, 1288, 1306, 1311, 1297, 1293, 1316, 1316,

     1325,    0, 1309, 1316, 1320, 1320, 1324, 1337, 1334, 1348,
        0, 1340, 1337, 1355, 1351, 1346, 1353, 1359, 1364, 1348,
     1355, 1363, 1365, 1363, 1360, 1360, 1370, 1370, 1372, 1369,
        0,    0,  347,    0, 1372, 1381,    0,    0, 1380, 1372,
     1379, 1395,    0, 1404,    0,    0, 1391, 1391, 1407, 1391,
     1394, 1404,    0,    0,    0, 1399, 1408, 1417, 1405,    0,
     1411, 1420, 1421, 1419, 1429, 1422, 1414, 1424, 1418, 1426,
     1422,    0,    0, 1425, 1425, 1427, 1442,    0,    0,    0,
     1445, 1440, 1439, 1462, 1448, 1466, 1452, 1462, 1458, 1471,
        0,    0, 1461, 1477, 1476, 1461, 1462, 1482, 1475, 1481,

     1487, 1483, 1487, 1490, 1474, 1484, 1493, 1482, 1493, 1496,
        0, 1486, 1494, 1500, 1511, 1516, 1521,    0, 1522, 1505,
     1518, 1516, 1529,    0,    0, 1534, 1527, 1519, 1525, 1539,
     1527,    0,    0,    0, 1537, 1530,    0,    0, 1541,    0,
     1527, 1543,    0, 1529, 1541, 1550, 1531, 1533,    0, 1540,
        0, 1542, 1549, 1545, 1569, 1571, 1572, 1580, 1566, 1583,
        0, 1586, 1583, 1590,    0,    0, 1590, 1582,    0, 1583,
     1574,    0, 1581, 1591, 1597,    0,    0, 1595,    0, 1587,
     1605, 1602, 1601, 1600, 1595, 1587, 1609, 1639, 1611,  139,
     1619, 1620, 1622,    0, 1640, 1632, 1619, 1645, 1645, 1642,

     1627, 1633, 1641,    0, 1651,    0,    0, 1652, 1653, 1657,
        0,    0,    0, 1643,  131,    0, 1654, 1644, 1651,    0,
     1654, 1658, 1663, 1649, 1662, 1671, 1670, 1689, 1685, 1692,
     1700, 1701, 1683, 1680, 1692, 1690,    0, 1695,    0, 1705,
        0, 1692, 1700,    0, 1713, 1697, 1709,    0, 1714,    0,
     1713,    0,    0, 1705, 1712, 1717,    0,   98, 1718, 1719,
     1707, 1708, 1706, 1719,    0,    0,    0,    0, 1731, 1726,
     1728,    0,    0,    0, 1737, 1749, 1756, 1757, 1741,    0,
     1750,    0,    0, 1751, 1764, 1747, 1753, 1759, 1758, 1768,
     1760, 1762, 1757,    0, 1773,    0, 1770, 1775, 1770,    0,

     1768,    0, 1766, 1782,    0,    0,    0, 1772,    0, 1781,
     1776, 1791, 1795,    0, 1813, 1801, 1813, 1810,   84, 1817,
     1810, 1817, 1805, 1808, 1808, 1809, 1823,    0,    0, 1827,
     1827, 1828, 1816, 1835,    0, 1819, 1820, 1825, 1826,    0,
     1852, 1822,    0,    0, 1827, 1830, 1838,    0, 1855, 1856,
        0, 1860, 1858, 1856, 1863, 1871,    0, 1877,    0,    0,
     1865, 1869, 1866, 1863, 1868, 1880, 1885,    0,   76, 1888,
        0, 1880, 1880, 1890, 1891,    0, 1888, 1893, 1881,    0,
     1880,    0, 1894, 1892,   74, 1902,    0,   67, 1897, 1925,
        0,    0,    0,    0, 1912, 1907, 1930, 1929,    0,    0,

     1915, 1935, 1929, 1921,    0, 1922, 1937, 1940, 1926, 1931,
     1929, 1933, 1929, 1936, 1930, 1934, 1945, 1953,    0, 1936,
        0, 1954, 1955, 1946, 1967, 1947,    0,    0, 1961, 1985,
        0,    0, 1980, 1983, 1986, 1986,   62, 1983,    0, 1990,
     1976,    0, 1978, 1986,    0, 1980, 1989, 1998, 1999,    0,
        0, 1985, 1983, 1998, 1989, 2005, 2007, 2007, 1993, 1994,
        0,    0, 1997, 2001, 2009, 2006,    0,    0, 2012, 2023,
        0, 2027, 2032, 2030, 2034,    0, 2049, 2046, 2047, 2049,
     2051, 2039, 2055, 2051,    0, 2041, 2057,    0,    0,    0,
     2062, 2039, 2050, 2052,   57, 2063, 2054, 2056, 2050, 2051,

     2068, 2065, 2069, 2066, 2074,    0, 2077,    0, 2089, 2102,
     2081, 2104, 2095,    0, 2090, 2106, 2110, 2289, 2095,    0,
     2103, 2102, 2099, 2105, 2104,    0, 2101, 2102, 2109,    0,
        0, 2109, 2110, 2122,    0, 2119, 2124, 2110, 2127, 2111,
        0,    0,    0, 2139, 2138, 2132,    0, 2151, 2148, 2160,
        0,   54, 2152, 2152,    0, 2162, 2152, 2156, 2155, 2154,
     2153, 2158,    0, 2162, 2162, 2164, 2164,    0,    0, 2176,
     2174, 2178, 2161,    0,    0,    0, 2166,    0, 2289, 2235,
     2242, 2247,   95, 2254, 2261, 2268, 2275, 2282
    } ;

static const flex_int16_t yy_def[1089] =
    {   0,
     1079,    1, 1079, 1079, 1079, 1079, 1079, 1080, 1079, 1079,
     1081, 1079, 1079, 1079, 1079, 1079, 1079, 1082, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1079, 1079, 1080, 1079, 1084, 1079, 1081,
     1079, 1085, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1086, 1082, 1087, 1088, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1079, 1080, 1080, 1084, 1081,
     1081, 1085, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1086,
     1087, 1088, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1079, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1079, 1079, 1079, 1079, 1079, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1079, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1079, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1079, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1079, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1079,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1079, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1079, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1079, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1079, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,    0, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079
    } ;

static const flex_int16_t yy_nxt[2367] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,    9,
       12,   13,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   43,    4,    4,    4,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   43,   44,   47,   51,   53,
       54,   54,   54,   54,   54,   55,   55,   55,   55,   55,
       57,   54,   54,   54,   54,   54,   59,   60,   56,   62,

       66,   67, 1060,   64,   58, 1017,   99,  108,  109,   68,
      974,   69,  110,  127,   77,  938,   70,   52,   71,   72,
       48,   78,  936,   73,  924,  151,   74,   56,   79,   75,
       67,   80,  884,   58,   81,   99,  108,  109,   68,   76,
       69,  110,  127,   77,   65,   70,  841,   71,   72,   47,
       78,  100,   73,   88,  151,   74,  155,   79,   75,  101,
       80,  118,   51,   81,   89,  102,   90,  125,   76,   82,
      126,   91,  161,   83,  111,  119,   92,   84,  112,  810,
      100,  120,   88,   85,  113,  155,   86,  792,  101,   87,
      118,  541,   48,   89,  102,   90,  125,  158,   82,  126,

       91,   52,   83,  111,  119,   92,   84,  112,  103,  104,
      120,  162,   85,  113,  173,   86,  105,  179,   87,   93,
      114,  106,  107,   94,  115,  121,  180,  122,  116,  123,
       95, 1079,  124,   96,  117, 1079,   97,  103,  104,   98,
      159,  540,  181,  173,  185,  105,  179,  495,   93,  114,
      106,  107,   94,  115,  121,  180,  122,  116,  123,   95,
      128,  124,   96,  117,  129,   97,  483,  130,   98,  411,
      131,  181,  147,  185,  148,   47, 1079,  149,  150,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,  128,
      174,  186,   56,  129,  152,  153,  130,   56,  175,  131,

      132,  147,  133,  148,  154,  134,  149,  150,  187,  196,
      135,  206,  136,  137,  138,  188,  139,  140,   48,  174,
      186,   56,  354,  152,  153,  326,   56,  175,  158,  132,
      158,  133,  325,  154,  134,  258,  258,  187,  196,  135,
      206,  136,  137,  138,  188,  139,  140,  141,  324,  204,
      169,  142,  205,  176,  143,  144,  177,  191,  192,  193,
      207,  145,  669,  665,  146,   57,   54,   54,   54,   54,
       54,   48,   50,  159,   46,  208,  141,  178,  204,   58,
      142,  205,  176,  143,  144,  177,  191,  192,  193,  207,
      145,  163,  163,  146,  164,  164,  164,  164,  164,  165,

      165,  165,  165,  165,  208,  189,  178,  156,   58,  190,
      167,  167,  166,  168,  168,  168,  168,  168,  182,  194,
      209,  197,  210,  211,  213,  183,  198,  199,  214,  195,
      200,  184,  216,  217,  189,  215,  201,  218,  190,  219,
      212,  166,  220,  202,  203,  221,  224,  182,  194,  209,
      197,  210,  211,  213,  183,  198,  199,  214,  195,  200,
      184,  216,  217,  222,  215,  201,  218,  225,  219,  212,
      226,  220,  202,  203,  221,  224,  227,  223,   61,  234,
       49,  235,  236,  237,  240,  238,  241,  242,   45, 1079,
      239,  248,  222, 1079, 1079,  249,  225, 1079,  252,  226,

      253,  259, 1079,  260, 1079,  227,  223,  228,  234,  229,
      235,  236,  237,  240,  238,  241,  242,  230,  231,  239,
      248,  250,  232,  233,  249,  254,  243,  252,  244,  253,
      259,  251,  260,  255,  256,  257,  228,  261,  229,  245,
      246,  265,  266,  277,  278,  279,  230,  231,  247,  262,
      250,  232,  233,  263,  254,  243,  280,  244,  286,  264,
      251,  287,  292,  256,  257, 1079,  261,  293,  245,  246,
      265,  266,  277,  278,  279, 1079, 1079,  247,  262, 1079,
      290, 1079,  263, 1079,  291,  280, 1079,  286,  264,  267,
      287,  292,  288,  289,  268,  269,  293,  296,  294,  300,

      270,  301,  271,  281,  272,  273,  297,  274,  275,  290,
      276,  298,  282,  291,  283,  295,  284,  299,  267, 1079,
      285,  288,  289,  268,  269,  310,  296,  294,  300,  270,
      301,  271,  281,  272,  273,  297,  274,  275,  314,  276,
      298,  282,  302,  283,  295,  284,  299,  317,  305,  285,
      303,  318,  315,  306,  310,  307,  308,  311,  316,  319,
      320,  312,  304,  309,  321,  313,   51,  314,  161,  161,
     1079,  302, 1079, 1079, 1079, 1079,  317,  305, 1079,  303,
      318,  315,  306, 1079,  307,  308,  311,  316,  319,  320,
      312,  304,  309,  321,  313,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,   52,  327,   52,  162,  165,
      165,  165,  165,  165,  322,  322,  328,  323,  323,  323,
      323,  323,  166,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  329,  330,  327,  331,  332,  333,  334,
      335,  336,  338,  337,  340,  328,  339,  341,  343,  348,
     1079,  166,  349, 1079,  350,  351,  342,  352,  357, 1079,
      360,  353,  329,  330,  344,  331,  332,  333,  334,  335,
      336,  338,  337,  340,  361,  339,  341,  343,  348,  345,
      346,  349,  347,  350,  351,  342,  352,  357,  355,  360,
      353,  356,  358,  344,  362,  363,  359,  364,  365,  366,

      367,  368,  369,  361,  370,  371,  372,  373,  345,  346,
      374,  347,  375,  377,  376,  378,  379,  355,  380,  381,
      356,  358,  382,  362,  363,  359,  364,  365,  366,  367,
      368,  369,  383,  370,  371,  372,  373,  384,  385,  374,
      386,  375,  377,  376,  378,  379,  387,  380,  381,  388,
      389,  382,  390,  391,  392,  393,  396,  397,  398,  399,
      402,  383,  400,  403,  394,  404,  384,  385,  405,  386,
      406,  407,  409,  410,  395,  387,  412,  413,  388,  389,
      401,  408,  414,  415,  416,  396,  397,  398,  399,  402,
      417,  400,  403,  394,  404,  418,  419,  405,  423,  406,

      407,  409,  410,  395,  420,  412,  413,  421, 1079,  401,
      408,  414,  415,  416,  258,  258,  424,  425,  426,  417,
      427,  428,  429,  430,  418,  419,  431,  423,  435,  436,
      433,  437,  438,  420,  439,  441,  421,  422,  434,  442,
      443,  440,  444,  432,  445,  424,  425,  426,  446,  427,
      428,  429,  430,  447,  448,  431,  449,  435,  436,  433,
      437,  438,  450,  439,  441,  451,  422,  434,  442,  443,
      440,  444,  432,  445,  452,  453,  454,  446,  455,  456,
      457,  458,  447,  448,  463,  449,  464,  465,  459,  466,
      467,  450,  468,  469,  451,  470,  471,  472,  473,  474,

      477,  478,  460,  452,  453,  454,  461,  455,  456,  457,
      458,  462,  475,  463,  476,  464,  465,  459,  466,  467,
      479,  468,  469,  480,  470,  471,  472,  473,  474,  477,
      478,  460,  481,  482,  484,  461,  485,  486,  488,  490,
      491,  475,  489,  476,  492, 1079, 1079, 1079, 1079,  479,
      493,  494,  480,  323,  323,  323,  323,  323,  496,  487,
      497,  481,  482,  484,  498,  485,  486,  488,  490,  491,
      499,  489,  500,  492,  323,  323,  323,  323,  323,  493,
      494,  501,  502,  503,  504,  505,  506,  496,  487,  497,
      507,  508,  509,  498,  510,  511,  512,  513,  514,  499,

      515,  500,  519,  520,  521,  522,  523,  524,  525,  526,
      501,  502,  503,  504,  505,  506,  527,  516,  528,  507,
      508,  509,  517,  510,  511,  512,  513,  514,  518,  515,
      529,  519,  520,  521,  522,  523,  524,  525,  526,  530,
      531,  532,  533,  534,  535,  527,  516,  528,  536,  537,
      538,  517,  539,  542,  543,  544,  545,  518,  546,  529,
      547,  551,  552,  549,  548,  553,  554,  555,  530,  531,
      532,  533,  534,  535,  550,  556,  559,  536,  537,  538,
      557,  539,  542,  543,  544,  545,  560,  546,  561,  547,
      551,  552,  549,  548,  553,  554,  555,  562,  558,  563,

      564,  565,  566,  550,  556,  559,  567,  568,  569,  557,
      570,  572,  571,  573,  574,  560,  575,  561,  576,  577,
      578,  579,  580,  581,  582,  583,  562,  558,  563,  564,
      565,  566,  584,  585,  586,  567,  568,  569,  587,  570,
      572,  571,  573,  574,  588,  575,  589,  576,  577,  578,
      579,  580,  581,  582,  583,  590,  591,  592,  593,  594,
      595,  584,  585,  586,  596,  597,  598,  587,  599,  600,
      601,  602,  603,  588,  604,  589,  605,  609,  610,  606,
      607,  611,  612,  613,  590,  591,  592,  593,  594,  595,
      616,  614,  617,  596,  597,  598,  608,  599,  600,  601,

      602,  603,  615,  604,  618,  605,  609,  610,  606,  607,
      611,  612,  613,  619,  620,  621,  622,  623,  624,  616,
      614,  617,  625,  626,  628,  608,  629,  630,  631,  632,
      633,  615,  634,  618,  635,  636,  637,  393,  638,  627,
      639,  640,  619,  620,  621,  622,  623,  624,  641,  642,
      643,  625,  626,  628,  644,  629,  630,  631,  632,  633,
      645,  634,  646,  635,  636,  637,  393,  638,  627,  639,
      640,  647,  648,  649,  650,  651,  652,  641,  642,  643,
      653,  654,  655,  644,  656,  657,  658,  659,  660,  645,
      661,  646,  662,  663,  664,  665,  666,  667,  668,  670,

      647,  648,  649,  650,  651,  652,  671,  672,  673,  653,
      654,  655,  674,  656,  657,  658,  659,  660,  675,  661,
      676,  662,  663,  664,  665,  666,  667,  668,  670,  677,
      678,  679,  680,  681,  682,  671,  672,  673,  683,  684,
      685,  674,  686,  687,  688,  689,  690,  675,  691,  676,
      692,  693,  694,  695,  696,  697,  698,  699,  677,  678,
      679,  680,  681,  682,  700,  701,  702,  683,  684,  685,
      703,  686,  687,  688,  689,  690,  704,  691,  705,  692,
      693,  694,  695,  696,  697,  698,  699,  706,  707,  708,
      709,  710,  711,  700,  701,  702,  712,  713,  714,  703,

      715,  716,  717,  718,  719,  704,  720,  705,  721,  722,
      723,  724,  725,  726,  727,  728,  706,  707,  708,  709,
      710,  711,  729,  730,  731,  712,  713,  714,  732,  715,
      716,  717,  718,  719,  733,  720,  734,  721,  722,  723,
      724,  725,  726,  727,  728,  735,  736,  737,  738,  739,
      740,  729,  730,  731,  741,  742,  743,  732,  744,  745,
      746,  747,  748,  733,  749,  734,  750,  751,  752,  753,
      754,  755,  756,  757,  735,  736,  737,  738,  739,  740,
      758,  759,  760,  741,  742,  743,  761,  744,  745,  746,
      747,  748,  762,  749,  764,  750,  751,  752,  753,  754,

      755,  756,  757,  763,  765,  766,  767,  768,  769,  758,
      759,  760,  770,  771,  772,  761,  773,  774,  775,  776,
      777,  762,  778,  764,  779,  780,  781,  782,  783,  784,
      785,  786,  763,  765,  766,  767,  768,  769,  787, 1079,
      791,  770,  771,  772,  793,  773,  774,  775,  776,  777,
     1079,  778,  794,  779,  780,  781,  782,  783,  784,  785,
      786,  788,  795,  796,  797,  798,  799,  787,  789,  791,
      800,  801,  802,  793,  803,  804,  805,  806,  807,  790,
      808,  794,  809,  811,  812,  813,  814,  815,  816,  817,
      788,  795,  796,  797,  798,  799,  818,  789,  819,  800,

      801,  802,  820,  803,  804,  805,  806,  807,  790,  808,
      821,  809,  811,  812,  813,  814,  815,  816,  817,  822,
      823,  824,  825,  390,  826,  818,  827,  819,  828,  829,
      830,  820,  831,  832,  833,  834,  835,  836,  837,  821,
      838,  839,  840,  842,  843,  844,  845,  846,  822,  823,
      824,  825,  390,  826,  847,  827,  848,  828,  829,  830,
      849,  831,  832,  833,  834,  835,  836,  837,  850,  838,
      839,  840,  842,  843,  844,  845,  846,  851,  852,  853,
      855,  856,  857,  847,  858,  848,  859,  860,  861,  849,
      854,  862,  863,  864,  865,  866,  868,  850,  869,  870,

      871,  867,  872,  873,  874,  875,  851,  852,  853,  855,
      856,  857,  876,  858,  877,  859,  860,  861,  878,  854,
      862,  863,  864,  865,  866,  868,  879,  869,  870,  871,
      867,  872,  873,  874,  875,  391,  880,  881,  882,  883,
      885,  876,  886,  877,  887,  888,  889,  878,  890,  891,
      892,  893,  894,  895,  896,  879,  897,  898,  899,  900,
      901,  905,  906, 1079,  391,  880,  881,  882,  883,  885,
      907,  886,  908,  887,  888,  889,  902,  890,  891,  892,
      893,  894,  895,  896,  909,  897,  898,  899,  900,  901,
      905,  906,  903,  904,  910,  911,  912,  913,  914,  907,

      915,  908,  916,  917,  918,  902,  919,  920,  921,  922,
      923,  925,  926,  909,  927,  928,  929,  930,  931,  932,
      933,  903,  904,  910,  911,  912,  913,  914,  934,  915,
      935,  916,  917,  918,  937,  919,  920,  921,  922,  923,
      925,  926,  939,  927,  928,  929,  930,  931,  932,  933,
      940,  941,  942,  943,  944,  945,  946,  934,  947,  935,
      948,  949,  950,  937,  951,  952,  953,  954,  955,  956,
      957,  939,  958,  959,  960,  961,  962,  963,  964,  940,
      941,  942,  943,  944,  945,  946,  965,  947,  966,  948,
      949,  950,  967,  951,  952,  953,  954,  955,  956,  957,

      968,  958,  959,  960,  961,  962,  963,  964,  969,  970,
      971,  972,  973,  975,  976,  965,  977,  966,  978,  979,
      980,  967,  981,  982,  983,  984,  985,  986,  987,  968,
      988,  989,  990,  991,  992,  993,  994,  969,  970,  971,
      972,  973,  975,  976,  995,  977,  996,  978,  979,  980,
      997,  981,  982,  983,  984,  985,  986,  987,  998,  988,
      989,  990,  991,  992,  993,  994,  999, 1000, 1001, 1002,
     1003, 1004, 1005,  995, 1006,  996, 1007, 1008, 1009,  997,
     1010, 1011, 1012, 1013, 1014, 1015, 1016,  998, 1018, 1019,
     1020, 1021, 1022, 1023, 1024,  999, 1000, 1001, 1002, 1003,

     1004, 1005, 1025, 1006, 1026, 1007, 1008, 1009, 1027, 1010,
     1011, 1012, 1013, 1014, 1015, 1016, 1028, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1029, 1030, 1031, 1032, 1033, 1034,
     1035, 1025, 1036, 1026, 1037, 1038, 1039, 1027, 1040, 1041,
     1042, 1043, 1044, 1045, 1046, 1028, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
     1054, 1036, 1055, 1037, 1038, 1039, 1056, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1057, 1047, 1048, 1049, 1050, 1051,
     1052, 1053, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1054,
     1066, 1055, 1067, 1068, 1069, 1056, 1070, 1071, 1072, 1073,

     1074, 1075, 1076, 1057, 1077, 1078, 1079, 1079, 1079, 1079,
     1079, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1079, 1066,
     1079, 1067, 1068, 1069, 1079, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1079, 1077, 1078,   46, 1079,   46,   46,   46,
       46,   46,   50, 1079,   50,   50,   50,   50,   50,   63,
       63,   63,   63,   63,  157, 1079,  157,  157,  157,  157,
      157,  160, 1079,  160,  160,  160,  160,  160,  170, 1079,
     1079,  170,  170,  170,  170,  171, 1079,  171,  171, 1079,
      171,  171,  172, 1079,  172,  172,  172,  172,    3, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079
    } ;

static const flex_int16_t yy_chk[2367] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    8,   11,   12,
       12,   12,   12,   12,   12,   13,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   15,   15,   13,   18,

     1083,   19, 1052,   18,   14,  995,   25,   28,   29,   19,
      937,   19,   29,   35,   21,  888,   19,   11,   19,   20,
        8,   21,  885,   20,  869,   40,   20,   13,   21,   20,
       19,   21,  819,   14,   21,   25,   28,   29,   19,   20,
       19,   29,   35,   21,   18,   19,  758,   19,   20,   46,
       21,   26,   20,   23,   40,   20,   42,   21,   20,   26,
       21,   32,   50,   21,   23,   26,   23,   34,   20,   22,
       34,   23,   52,   22,   30,   32,   23,   22,   30,  715,
       26,   32,   23,   22,   30,   42,   22,  690,   26,   22,
       32,  383,   46,   23,   26,   23,   34,   48,   22,   34,

       23,   50,   22,   30,   32,   23,   22,   30,   27,   27,
       32,   52,   22,   30,   67,   22,   27,   70,   22,   24,
       31,   27,   27,   24,   31,   33,   71,   33,   31,   33,
       24,   63,   33,   24,   31,   63,   24,   27,   27,   24,
       48,  382,   72,   67,   74,   27,   70,  329,   24,   31,
       27,   27,   24,   31,   33,   71,   33,   31,   33,   24,
       36,   33,   24,   31,   36,   24,  314,   36,   24,  247,
       36,   72,   39,   74,   39,  157,   63,   39,   39,   53,
       53,   53,   53,   53,   55,   55,   55,   55,   55,   36,
       68,   75,   53,   36,   41,   41,   36,   55,   68,   36,

       37,   39,   37,   39,   41,   37,   39,   39,   77,   81,
       37,   85,   37,   37,   37,   77,   37,   37,  157,   68,
       75,   53,  198,   41,   41,  172,   55,   68,  158,   37,
      159,   37,  171,   41,   37,  121,  121,   77,   81,   37,
       85,   37,   37,   37,   77,   37,   37,   38,  170,   84,
       59,   38,   84,   69,   38,   38,   69,   79,   79,   79,
       86,   38,  533,  533,   38,   54,   54,   54,   54,   54,
       54,  158,   51,  159,   47,   87,   38,   69,   84,   54,
       38,   84,   69,   38,   38,   69,   79,   79,   79,   86,
       38,   56,   56,   38,   56,   56,   56,   56,   56,   57,

       57,   57,   57,   57,   87,   78,   69,   44,   54,   78,
       58,   58,   57,   58,   58,   58,   58,   58,   73,   80,
       88,   82,   89,   90,   91,   73,   82,   83,   92,   80,
       83,   73,   93,   94,   78,   92,   83,   95,   78,   96,
       90,   57,   97,   83,   83,   98,  100,   73,   80,   88,
       82,   89,   90,   91,   73,   82,   83,   92,   80,   83,
       73,   93,   94,   99,   92,   83,   95,  101,   96,   90,
      102,   97,   83,   83,   98,  100,  104,   99,   17,  107,
       10,  108,  109,  110,  112,  111,  112,  112,    7,    3,
      111,  114,   99,    0,    0,  115,  101,    0,  117,  102,

      118,  122,    0,  123,    0,  104,   99,  105,  107,  105,
      108,  109,  110,  112,  111,  112,  112,  105,  105,  111,
      114,  116,  105,  105,  115,  119,  113,  117,  113,  118,
      122,  116,  123,  119,  120,  120,  105,  124,  105,  113,
      113,  126,  127,  129,  130,  131,  105,  105,  113,  125,
      116,  105,  105,  125,  119,  113,  132,  113,  134,  125,
      116,  135,  138,  120,  120,    0,  124,  139,  113,  113,
      126,  127,  129,  130,  131,    0,    0,  113,  125,    0,
      137,    0,  125,    0,  137,  132,    0,  134,  125,  128,
      135,  138,  136,  136,  128,  128,  139,  141,  140,  143,

      128,  144,  128,  133,  128,  128,  142,  128,  128,  137,
      128,  142,  133,  137,  133,  140,  133,  142,  128,    0,
      133,  136,  136,  128,  128,  148,  141,  140,  143,  128,
      144,  128,  133,  128,  128,  142,  128,  128,  150,  128,
      142,  133,  146,  133,  140,  133,  142,  152,  147,  133,
      146,  152,  151,  147,  148,  147,  147,  149,  151,  153,
      154,  149,  146,  147,  155,  149,  160,  150,  161,  162,
        0,  146,    0,    0,    0,    0,  152,  147,    0,  146,
      152,  151,  147,    0,  147,  147,  149,  151,  153,  154,
      149,  146,  147,  155,  149,  163,  163,  163,  163,  163,

      164,  164,  164,  164,  164,  160,  175,  161,  162,  165,
      165,  165,  165,  165,  166,  166,  176,  166,  166,  166,
      166,  166,  165,  167,  167,  167,  167,  167,  168,  168,
      168,  168,  168,  180,  181,  175,  182,  183,  185,  186,
      187,  188,  189,  188,  190,  176,  189,  191,  192,  194,
        0,  165,  195,    0,  196,  196,  191,  197,  200,    0,
      202,  197,  180,  181,  193,  182,  183,  185,  186,  187,
      188,  189,  188,  190,  203,  189,  191,  192,  194,  193,
      193,  195,  193,  196,  196,  191,  197,  200,  199,  202,
      197,  199,  201,  193,  204,  206,  201,  207,  208,  209,

      210,  212,  213,  203,  214,  215,  216,  217,  193,  193,
      218,  193,  219,  220,  219,  221,  222,  199,  223,  224,
      199,  201,  225,  204,  206,  201,  207,  208,  209,  210,
      212,  213,  226,  214,  215,  216,  217,  227,  228,  218,
      229,  219,  220,  219,  221,  222,  230,  223,  224,  231,
      232,  225,  233,  233,  233,  233,  234,  235,  236,  237,
      239,  226,  238,  240,  233,  241,  227,  228,  242,  229,
      243,  244,  245,  246,  233,  230,  248,  249,  231,  232,
      238,  244,  250,  251,  252,  234,  235,  236,  237,  239,
      253,  238,  240,  233,  241,  255,  256,  242,  259,  243,

      244,  245,  246,  233,  257,  248,  249,  257,    0,  238,
      244,  250,  251,  252,  258,  258,  260,  261,  261,  253,
      262,  263,  264,  265,  255,  256,  266,  259,  268,  269,
      267,  270,  271,  257,  272,  273,  257,  258,  267,  274,
      275,  272,  276,  266,  277,  260,  261,  261,  278,  262,
      263,  264,  265,  279,  280,  266,  281,  268,  269,  267,
      270,  271,  282,  272,  273,  283,  258,  267,  274,  275,
      272,  276,  266,  277,  284,  286,  287,  278,  288,  289,
      290,  291,  279,  280,  294,  281,  295,  296,  292,  297,
      298,  282,  299,  300,  283,  301,  302,  303,  304,  305,

      307,  308,  292,  284,  286,  287,  292,  288,  289,  290,
      291,  292,  306,  294,  306,  295,  296,  292,  297,  298,
      309,  299,  300,  310,  301,  302,  303,  304,  305,  307,
      308,  292,  311,  313,  315,  292,  316,  316,  317,  318,
      319,  306,  317,  306,  320,    0,    0,    0,    0,  309,
      327,  328,  310,  322,  322,  322,  322,  322,  330,  316,
      331,  311,  313,  315,  332,  316,  316,  317,  318,  319,
      336,  317,  338,  320,  323,  323,  323,  323,  323,  327,
      328,  339,  340,  341,  342,  343,  344,  330,  316,  331,
      345,  346,  347,  332,  348,  349,  350,  351,  352,  336,

      353,  338,  355,  356,  357,  358,  359,  360,  361,  362,
      339,  340,  341,  342,  343,  344,  363,  354,  367,  345,
      346,  347,  354,  348,  349,  350,  351,  352,  354,  353,
      369,  355,  356,  357,  358,  359,  360,  361,  362,  371,
      372,  373,  374,  375,  376,  363,  354,  367,  378,  379,
      380,  354,  381,  384,  385,  386,  387,  354,  388,  369,
      389,  396,  400,  394,  389,  401,  404,  405,  371,  372,
      373,  374,  375,  376,  394,  407,  411,  378,  379,  380,
      409,  381,  384,  385,  386,  387,  412,  388,  413,  389,
      396,  400,  394,  389,  401,  404,  405,  414,  409,  415,

      416,  417,  418,  394,  407,  411,  420,  421,  422,  409,
      423,  424,  423,  425,  426,  412,  427,  413,  428,  429,
      430,  431,  433,  435,  436,  437,  414,  409,  415,  416,
      417,  418,  438,  439,  440,  420,  421,  422,  441,  423,
      424,  423,  425,  426,  442,  427,  443,  428,  429,  430,
      431,  433,  435,  436,  437,  444,  445,  446,  447,  448,
      449,  438,  439,  440,  450,  451,  452,  441,  454,  456,
      457,  458,  459,  442,  460,  443,  461,  463,  464,  462,
      462,  465,  466,  467,  444,  445,  446,  447,  448,  449,
      471,  470,  472,  450,  451,  452,  462,  454,  456,  457,

      458,  459,  470,  460,  475,  461,  463,  464,  462,  462,
      465,  466,  467,  476,  477,  478,  479,  480,  481,  471,
      470,  472,  482,  483,  484,  462,  485,  486,  487,  489,
      490,  470,  492,  475,  494,  495,  496,  497,  498,  483,
      499,  500,  476,  477,  478,  479,  480,  481,  501,  503,
      504,  482,  483,  484,  505,  485,  486,  487,  489,  490,
      506,  492,  507,  494,  495,  496,  497,  498,  483,  499,
      500,  508,  509,  510,  512,  513,  514,  501,  503,  504,
      515,  516,  517,  505,  518,  519,  520,  521,  522,  506,
      523,  507,  524,  525,  526,  527,  528,  529,  530,  535,

      508,  509,  510,  512,  513,  514,  536,  539,  540,  515,
      516,  517,  541,  518,  519,  520,  521,  522,  541,  523,
      542,  524,  525,  526,  527,  528,  529,  530,  535,  544,
      547,  548,  549,  550,  551,  536,  539,  540,  552,  556,
      557,  541,  558,  559,  561,  562,  563,  541,  564,  542,
      565,  566,  567,  568,  569,  570,  571,  574,  544,  547,
      548,  549,  550,  551,  575,  576,  577,  552,  556,  557,
      581,  558,  559,  561,  562,  563,  582,  564,  583,  565,
      566,  567,  568,  569,  570,  571,  574,  584,  585,  586,
      587,  588,  589,  575,  576,  577,  590,  593,  594,  581,

      595,  596,  597,  598,  599,  582,  600,  583,  601,  602,
      603,  604,  605,  606,  607,  608,  584,  585,  586,  587,
      588,  589,  609,  610,  612,  590,  593,  594,  613,  595,
      596,  597,  598,  599,  614,  600,  615,  601,  602,  603,
      604,  605,  606,  607,  608,  616,  617,  619,  620,  621,
      622,  609,  610,  612,  623,  626,  627,  613,  628,  629,
      630,  631,  635,  614,  636,  615,  639,  641,  642,  644,
      645,  646,  647,  648,  616,  617,  619,  620,  621,  622,
      650,  652,  653,  623,  626,  627,  654,  628,  629,  630,
      631,  635,  655,  636,  656,  639,  641,  642,  644,  645,

      646,  647,  648,  655,  657,  658,  659,  660,  662,  650,
      652,  653,  663,  664,  667,  654,  668,  670,  671,  673,
      674,  655,  675,  656,  678,  680,  681,  682,  683,  684,
      685,  686,  655,  657,  658,  659,  660,  662,  687,    0,
      689,  663,  664,  667,  691,  668,  670,  671,  673,  674,
        0,  675,  692,  678,  680,  681,  682,  683,  684,  685,
      686,  688,  693,  695,  696,  697,  698,  687,  688,  689,
      699,  700,  701,  691,  702,  703,  705,  708,  709,  688,
      710,  692,  714,  717,  718,  719,  721,  722,  723,  724,
      688,  693,  695,  696,  697,  698,  725,  688,  726,  699,

      700,  701,  727,  702,  703,  705,  708,  709,  688,  710,
      728,  714,  717,  718,  719,  721,  722,  723,  724,  729,
      730,  731,  732,  733,  734,  725,  735,  726,  736,  738,
      740,  727,  742,  743,  745,  746,  747,  749,  751,  728,
      754,  755,  756,  759,  760,  761,  762,  763,  729,  730,
      731,  732,  733,  734,  764,  735,  769,  736,  738,  740,
      770,  742,  743,  745,  746,  747,  749,  751,  771,  754,
      755,  756,  759,  760,  761,  762,  763,  775,  776,  777,
      778,  779,  781,  764,  784,  769,  785,  786,  787,  770,
      777,  788,  789,  790,  791,  792,  793,  771,  795,  797,

      798,  792,  799,  801,  803,  804,  775,  776,  777,  778,
      779,  781,  808,  784,  810,  785,  786,  787,  811,  777,
      788,  789,  790,  791,  792,  793,  812,  795,  797,  798,
      792,  799,  801,  803,  804,  813,  815,  816,  817,  818,
      820,  808,  821,  810,  822,  823,  824,  811,  825,  826,
      827,  830,  831,  832,  833,  812,  834,  836,  837,  838,
      839,  842,  845,    0,  813,  815,  816,  817,  818,  820,
      846,  821,  847,  822,  823,  824,  841,  825,  826,  827,
      830,  831,  832,  833,  849,  834,  836,  837,  838,  839,
      842,  845,  841,  841,  850,  852,  853,  854,  855,  846,

      856,  847,  858,  861,  862,  841,  863,  864,  865,  866,
      867,  870,  872,  849,  873,  874,  875,  877,  878,  879,
      881,  841,  841,  850,  852,  853,  854,  855,  883,  856,
      884,  858,  861,  862,  886,  863,  864,  865,  866,  867,
      870,  872,  889,  873,  874,  875,  877,  878,  879,  881,
      890,  895,  896,  897,  898,  901,  902,  883,  903,  884,
      904,  906,  907,  886,  908,  909,  910,  911,  912,  913,
      914,  889,  915,  916,  917,  918,  920,  922,  923,  890,
      895,  896,  897,  898,  901,  902,  924,  903,  925,  904,
      906,  907,  926,  908,  909,  910,  911,  912,  913,  914,

      929,  915,  916,  917,  918,  920,  922,  923,  930,  933,
      934,  935,  936,  938,  940,  924,  941,  925,  943,  944,
      946,  926,  947,  948,  949,  952,  953,  954,  955,  929,
      956,  957,  958,  959,  960,  963,  964,  930,  933,  934,
      935,  936,  938,  940,  965,  941,  966,  943,  944,  946,
      969,  947,  948,  949,  952,  953,  954,  955,  970,  956,
      957,  958,  959,  960,  963,  964,  972,  973,  974,  975,
      977,  978,  979,  965,  980,  966,  981,  982,  983,  969,
      984,  986,  987,  991,  992,  993,  994,  970,  996,  997,
      998,  999, 1000, 1001, 1002,  972,  973,  974,  975,  977,

      978,  979, 1003,  980, 1004,  981,  982,  983, 1005,  984,
      986,  987,  991,  992,  993,  994, 1007,  996,  997,  998,
      999, 1000, 1001, 1002, 1009, 1010, 1011, 1012, 1013, 1015,
     1016, 1003, 1017, 1004, 1019, 1021, 1022, 1005, 1023, 1024,
     1025, 1027, 1028, 1029, 1032, 1007, 1033, 1034, 1036, 1037,
     1038, 1039, 1040, 1009, 1010, 1011, 1012, 1013, 1015, 1016,
     1044, 1017, 1045, 1019, 1021, 1022, 1046, 1023, 1024, 1025,
     1027, 1028, 1029, 1032, 1048, 1033, 1034, 1036, 1037, 1038,
     1039, 1040, 1049, 1050, 1053, 1054, 1056, 1057, 1058, 1044,
     1059, 1045, 1060, 1061, 1062, 1046, 1064, 1065, 1066, 1067,

     1070, 1071, 1072, 1048, 1073, 1077,    0,    0,    0,    0,
        0, 1049, 1050, 1053, 1054, 1056, 1057, 1058,    0, 1059,
        0, 1060, 1061, 1062,    0, 1064, 1065, 1066, 1067, 1070,
     1071, 1072,    0, 1073, 1077, 1080,    0, 1080, 1080, 1080,
     1080, 1080, 1081,    0, 1081, 1081, 1081, 1081, 1081, 1082,
     1082, 1082, 1082, 1082, 1084,    0, 1084, 1084, 1084, 1084,
     1084, 1085,    0, 1085, 1085, 1085, 1085, 1085, 1086,    0,
        0, 1086, 1086, 1086, 1086, 1087,    0, 1087, 1087,    0,
     1087, 1087, 1088,    0, 1088, 1088, 1088, 1088, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079
    } ;

static const flex_int16_t yy_rule_linenum[241] =
    {   0,
       35,   36,   37,   38,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,

      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  162,  163,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
      199,  200,  201,  202,  203,  204,  205,  206,  207,  208,
      209,  210,  211,  212,  213,  214,  215,  216,  217,  218,
      219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,

      239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
      249,  250,  252,  253,  254,  255,  256,  258,  259,  260,
      262,  263,  265,  266,  267,  269,  270,  271,  272,  273,
      274,  275,  276,  278,  280,  281,  282,  283,  286,  287
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "mc_lexer.l"
#line 2 "mc_lexer.l"
/* C++ string header, for string ops below */
#include <string>

/* Implementation of yyFlexScanner */ 
#include "mc_scanner.hpp"
#undef  YY_DECL
#define YY_DECL int MC::MC_Scanner::yylex( MC::MC_Parser::semantic_type * const lval, MC::MC_Parser::location_type *loc )

/* typedef to make the returns for the tokens shorter */
using token = MC::MC_Parser::token;

/* define yyterminate as this instead of NULL */
#define yyterminate() return( token::END )

/* msvc2010 requires that we exclude this header file. */
#define YY_NO_UNISTD_H

/* update location on matching */
#define YY_USER_ACTION loc->step(); loc->columns(yyleng);

#line 1405 "/home/kk/CLionProjects/mini/cmake-build-debug/mc_lexer.yy.cc"
#line 1406 "/home/kk/CLionProjects/mini/cmake-build-debug/mc_lexer.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 30 "mc_lexer.l"

          /** Code executed at the beginning of yylex **/
#line 33 "mc_lexer.l"
            yylval = lval;

#line 1604 "/home/kk/CLionProjects/mini/cmake-build-debug/mc_lexer.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1080 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2289 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 241 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 241 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 242 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 35 "mc_lexer.l"
{ return token::ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "mc_lexer.l"
{ return token::ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "mc_lexer.l"
{ return token::ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "mc_lexer.l"
{ return token::ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return token::special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 43 "mc_lexer.l"
{ return token::ANDOP; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "mc_lexer.l"
{ return token::ANY; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "mc_lexer.l"
{ return token::AS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "mc_lexer.l"
{ return token::ASC; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "mc_lexer.l"
{ return token::AUTO_INCREMENT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "mc_lexer.l"
{ return token::BEFORE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "mc_lexer.l"
{ return token::BIGINT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "mc_lexer.l"
{ return token::BINARY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "mc_lexer.l"
{ return token::BIT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "mc_lexer.l"
{ return token::BLOB; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "mc_lexer.l"
{ return token::BOTH; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "mc_lexer.l"
{ return token::BY; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "mc_lexer.l"
{ return token::CALL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "mc_lexer.l"
{ return token::CASCADE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "mc_lexer.l"
{ return token::CASE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "mc_lexer.l"
{ return token::CHANGE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "mc_lexer.l"
{ return token::CHAR; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "mc_lexer.l"
{ return token::CHECK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "mc_lexer.l"
{ return token::COLLATE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "mc_lexer.l"
{ return token::COLUMN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "mc_lexer.l"
{ return token::COMMENT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 64 "mc_lexer.l"
{ return token::CONDITION; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 65 "mc_lexer.l"
{ return token::CONSTRAINT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "mc_lexer.l"
{ return token::CONTINUE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "mc_lexer.l"
{ return token::CONVERT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "mc_lexer.l"
{ return token::CREATE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "mc_lexer.l"
{ return token::CROSS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "mc_lexer.l"
{ return token::CURRENT_DATE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "mc_lexer.l"
{ return token::CURRENT_TIME; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "mc_lexer.l"
{ return token::CURRENT_TIMESTAMP; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "mc_lexer.l"
{ return token::CURRENT_USER; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "mc_lexer.l"
{ return token::CURSOR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "mc_lexer.l"
{ return token::DATABASE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "mc_lexer.l"
{ return token::DATABASES; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "mc_lexer.l"
{ return token::DATE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "mc_lexer.l"
{ return token::DATETIME; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "mc_lexer.l"
{ return token::DAY_HOUR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "mc_lexer.l"
{ return token::DAY_MICROSECOND; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 81 "mc_lexer.l"
{ return token::DAY_MINUTE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 82 "mc_lexer.l"
{ return token::DAY_SECOND; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "mc_lexer.l"
{ return token::DECIMAL; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "mc_lexer.l"
{ return token::DECLARE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "mc_lexer.l"
{ return token::DEFAULT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "mc_lexer.l"
{ return token::DELAYED; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "mc_lexer.l"
{ return token::DELETE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "mc_lexer.l"
{ return token::DESC; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 89 "mc_lexer.l"
{ return token::DESCRIBE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 90 "mc_lexer.l"
{ return token::DETERMINISTIC; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 91 "mc_lexer.l"
{ return token::DISTINCT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "mc_lexer.l"
{ return token::DISTINCTROW; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "mc_lexer.l"
{ return token::DIV; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "mc_lexer.l"
{ return token::DOUBLE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "mc_lexer.l"
{ return token::DROP; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "mc_lexer.l"
{ return token::DUAL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "mc_lexer.l"
{ return token::EACH; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 98 "mc_lexer.l"
{ return token::ELSE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 99 "mc_lexer.l"
{ return token::ELSEIF; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 100 "mc_lexer.l"
{ return token::END; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 101 "mc_lexer.l"
{ return token::ENUM; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 102 "mc_lexer.l"
{ return token::ESCAPED; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 103 "mc_lexer.l"
{ return token::EXIT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 104 "mc_lexer.l"
{ return token::EXPLAIN; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 105 "mc_lexer.l"
{ return token::FETCH; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 106 "mc_lexer.l"
{ return token::FLOAT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 107 "mc_lexer.l"
{ return token::FOR; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 108 "mc_lexer.l"
{ return token::FORCE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 109 "mc_lexer.l"
{ return token::FOREIGN; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 110 "mc_lexer.l"
{ return token::FROM; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 111 "mc_lexer.l"
{ return token::FULLTEXT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 112 "mc_lexer.l"
{ return token::GRANT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 113 "mc_lexer.l"
{ return token::GROUP; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 114 "mc_lexer.l"
{ return token::HAVING; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 115 "mc_lexer.l"
{ return token::HIGH_PRIORITY; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 116 "mc_lexer.l"
{ return token::HOUR_MICROSECOND; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 117 "mc_lexer.l"
{ return token::HOUR_MINUTE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 118 "mc_lexer.l"
{ return token::HOUR_SECOND; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 119 "mc_lexer.l"
{ return token::IF; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 120 "mc_lexer.l"
{ return token::IGNORE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 121 "mc_lexer.l"
{ return token::IN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 122 "mc_lexer.l"
{ return token::INFILE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 123 "mc_lexer.l"
{ return token::INNER; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 124 "mc_lexer.l"
{ return token::INOUT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 125 "mc_lexer.l"
{ return token::INSENSITIVE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 126 "mc_lexer.l"
{ return token::INSERT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 127 "mc_lexer.l"
{ return token::INTEGER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 128 "mc_lexer.l"
{ return token::INTERVAL; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 129 "mc_lexer.l"
{ return token::INTO; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 130 "mc_lexer.l"
{ return token::IS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 131 "mc_lexer.l"
{ return token::ITERATE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 132 "mc_lexer.l"
{ return token::JOIN; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 133 "mc_lexer.l"
{ return token::KEY; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 134 "mc_lexer.l"
{ return token::KEYS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 135 "mc_lexer.l"
{ return token::KILL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 136 "mc_lexer.l"
{ return token::LEADING; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 137 "mc_lexer.l"
{ return token::LEAVE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 138 "mc_lexer.l"
{ return token::LEFT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 139 "mc_lexer.l"
{ return token::LIKE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 140 "mc_lexer.l"
{ return token::LIMIT; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 141 "mc_lexer.l"
{ return token::LINES; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 142 "mc_lexer.l"
{ return token::LOAD; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 143 "mc_lexer.l"
{ return token::LOCALTIME; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 144 "mc_lexer.l"
{ return token::LOCALTIMESTAMP; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 145 "mc_lexer.l"
{ return token::LOCK; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 146 "mc_lexer.l"
{ return token::LONG; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 147 "mc_lexer.l"
{ return token::LONGBLOB; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 148 "mc_lexer.l"
{ return token::LONGTEXT; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 149 "mc_lexer.l"
{ return token::LOOP; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 150 "mc_lexer.l"
{ return token::LOW_PRIORITY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 151 "mc_lexer.l"
{ return token::MATCH; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 152 "mc_lexer.l"
{ return token::MEDIUMBLOB; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 153 "mc_lexer.l"
{ return token::MEDIUMINT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 154 "mc_lexer.l"
{ return token::MEDIUMTEXT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 155 "mc_lexer.l"
{ return token::MINUTE_MICROSECOND; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 156 "mc_lexer.l"
{ return token::MINUTE_SECOND; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 157 "mc_lexer.l"
{ return token::MOD; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 158 "mc_lexer.l"
{ return token::MODIFIES; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 159 "mc_lexer.l"
{ return token::NATURAL; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 160 "mc_lexer.l"
{ return token::NOT; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 161 "mc_lexer.l"
{ return token::NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 162 "mc_lexer.l"
{ return token::NULLX; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 163 "mc_lexer.l"
{ return token::NUMBER; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 164 "mc_lexer.l"
{ return token::ON; }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 165 "mc_lexer.l"
{ return token::ONDUPLICATE; } /* hack due to limited lookahead */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 166 "mc_lexer.l"
{ return token::OPTIMIZE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 167 "mc_lexer.l"
{ return token::OPTION; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 168 "mc_lexer.l"
{ return token::OPTIONALLY; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 169 "mc_lexer.l"
{ return token::OR; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 170 "mc_lexer.l"
{ return token::ORDER; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 171 "mc_lexer.l"
{ return token::OUT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 172 "mc_lexer.l"
{ return token::OUTER; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 173 "mc_lexer.l"
{ return token::OUTFILE; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 174 "mc_lexer.l"
{ return token::PRECISION; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 175 "mc_lexer.l"
{ return token::PRIMARY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 176 "mc_lexer.l"
{ return token::PROCEDURE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 177 "mc_lexer.l"
{ return token::PURGE; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 178 "mc_lexer.l"
{ return token::QUICK; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 179 "mc_lexer.l"
{ return token::READ; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 180 "mc_lexer.l"
{ return token::READS; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 181 "mc_lexer.l"
{ return token::REAL; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 182 "mc_lexer.l"
{ return token::REFERENCES; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 183 "mc_lexer.l"
{ return token::REGEXP; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 184 "mc_lexer.l"
{ return token::RELEASE; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 185 "mc_lexer.l"
{ return token::RENAME; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 186 "mc_lexer.l"
{ return token::REPEAT; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 187 "mc_lexer.l"
{ return token::REPLACE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 188 "mc_lexer.l"
{ return token::REQUIRE; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 189 "mc_lexer.l"
{ return token::RESTRICT; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 190 "mc_lexer.l"
{ return token::RETURN; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 191 "mc_lexer.l"
{ return token::REVOKE; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 192 "mc_lexer.l"
{ return token::RIGHT; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 193 "mc_lexer.l"
{ return token::ROLLUP; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 194 "mc_lexer.l"
{ return token::SCHEMA; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 195 "mc_lexer.l"
{ return token::SCHEMAS; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 196 "mc_lexer.l"
{ return token::SECOND_MICROSECOND; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 197 "mc_lexer.l"
{ return token::SELECT; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 198 "mc_lexer.l"
{ return token::SENSITIVE; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 199 "mc_lexer.l"
{ return token::SEPARATOR; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 200 "mc_lexer.l"
{ return token::SET; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 201 "mc_lexer.l"
{ return token::SHOW; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 202 "mc_lexer.l"
{ return token::SMALLINT; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 203 "mc_lexer.l"
{ return token::SOME; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 204 "mc_lexer.l"
{ return token::SONAME; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 205 "mc_lexer.l"
{ return token::SPATIAL; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 206 "mc_lexer.l"
{ return token::SPECIFIC; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 207 "mc_lexer.l"
{ return token::SQL; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 208 "mc_lexer.l"
{ return token::SQLEXCEPTION; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 209 "mc_lexer.l"
{ return token::SQLSTATE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 210 "mc_lexer.l"
{ return token::SQLWARNING; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 211 "mc_lexer.l"
{ return token::SQL_BIG_RESULT; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 212 "mc_lexer.l"
{ return token::SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 213 "mc_lexer.l"
{ return token::SQL_SMALL_RESULT; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 214 "mc_lexer.l"
{ return token::SSL; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 215 "mc_lexer.l"
{ return token::STARTING; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 216 "mc_lexer.l"
{ return token::STRAIGHT_JOIN; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 217 "mc_lexer.l"
{ return token::TABLE; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 218 "mc_lexer.l"
{ return token::TEMPORARY; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 219 "mc_lexer.l"
{ return token::TERMINATED; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 220 "mc_lexer.l"
{ return token::TEXT; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 221 "mc_lexer.l"
{ return token::THEN; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 222 "mc_lexer.l"
{ return token::TINYINT; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 223 "mc_lexer.l"
{ return token::TINYTEXT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 224 "mc_lexer.l"
{ return token::TO; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 225 "mc_lexer.l"
{ return token::TRAILING; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 226 "mc_lexer.l"
{ return token::TRIGGER; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 227 "mc_lexer.l"
{ return token::UNDO; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 228 "mc_lexer.l"
{ return token::UNION; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 229 "mc_lexer.l"
{ return token::UNIQUE; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 230 "mc_lexer.l"
{ return token::UNLOCK; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 231 "mc_lexer.l"
{ return token::UNSIGNED; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 232 "mc_lexer.l"
{ return token::UPDATE; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 233 "mc_lexer.l"
{ return token::USAGE; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 234 "mc_lexer.l"
{ return token::USE; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 235 "mc_lexer.l"
{ return token::USING; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 236 "mc_lexer.l"
{ return token::UTC_DATE; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 237 "mc_lexer.l"
{ return token::UTC_TIME; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 238 "mc_lexer.l"
{ return token::UTC_TIMESTAMP; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 239 "mc_lexer.l"
{ return token::VALUES; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 240 "mc_lexer.l"
{ return token::VARBINARY; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 241 "mc_lexer.l"
{ return token::VARCHAR; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 242 "mc_lexer.l"
{ return token::VARYING; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 243 "mc_lexer.l"
{ return token::WHEN; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 244 "mc_lexer.l"
{ return token::WHERE; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 245 "mc_lexer.l"
{ return token::WHILE; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 246 "mc_lexer.l"
{ return token::WITH; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 247 "mc_lexer.l"
{ return token::WRITE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 248 "mc_lexer.l"
{ return token::XOR; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 249 "mc_lexer.l"
{return token::QUIT;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 250 "mc_lexer.l"
{ yylval->build<int>(atoi(yytext)); return token::INTNUM; }
	YY_BREAK
case 213:
#line 253 "mc_lexer.l"
case 214:
#line 254 "mc_lexer.l"
case 215:
#line 255 "mc_lexer.l"
case 216:
#line 256 "mc_lexer.l"
case 217:
YY_RULE_SETUP
#line 256 "mc_lexer.l"
{ yylval->build<float>(atof(yytext)) ;
                                  return token::APPROXNUM; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 258 "mc_lexer.l"
{ yylval->build<bool>(true); return token::BOOL; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 259 "mc_lexer.l"
{ yylval->build<bool>(false); return token::BOOL; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 260 "mc_lexer.l"
{ yylval->build<bool>(false); return token::BOOL; }
	YY_BREAK
case 221:
#line 263 "mc_lexer.l"
case 222:
YY_RULE_SETUP
#line 263 "mc_lexer.l"
{ yylval->build<std::string>(yytext); return token::STRING; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 265 "mc_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 266 "mc_lexer.l"
{ return token::ANDOP; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 267 "mc_lexer.l"
{ return token::OR; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 269 "mc_lexer.l"
{ yylval->build<int>(4); return token::COMPARISON; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 270 "mc_lexer.l"
{ yylval->build<int>(12); return token::COMPARISON; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 271 "mc_lexer.l"
{ yylval->build<int>(6); return token::COMPARISON; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 272 "mc_lexer.l"
{ yylval->build<int>(2); return token::COMPARISON; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 273 "mc_lexer.l"
{ yylval->build<int>(5); return token::COMPARISON; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 274 "mc_lexer.l"
{ yylval->build<int>(1); return token::COMPARISON; }
	YY_BREAK
case 232:
#line 276 "mc_lexer.l"
case 233:
YY_RULE_SETUP
#line 276 "mc_lexer.l"
{ yylval->build<int>(3); return token::COMPARISON; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 278 "mc_lexer.l"
{ yylval->build<std::string>(yytext);
                          return token::NAME; }
	YY_BREAK
case 235:
#line 281 "mc_lexer.l"
case 236:
#line 282 "mc_lexer.l"
case 237:
#line 283 "mc_lexer.l"
case 238:
YY_RULE_SETUP
#line 283 "mc_lexer.l"
{ yylval->build<std::string>(strdup(yytext+1)); return token::USERVAR; }
	YY_BREAK
/* everything else */
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 286 "mc_lexer.l"
/* white space */
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 287 "mc_lexer.l"
{  }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 288 "mc_lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2869 "/home/kk/CLionProjects/mini/cmake-build-debug/mc_lexer.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1080 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1080 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1079);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 288 "mc_lexer.l"




